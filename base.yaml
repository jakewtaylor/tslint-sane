rules:
    # Enforces PascalCase class names
    class-name: true

    # Enforces indentation of 4 spaces
    indent:
        - true
        - spaces
        - 4

    # Disallows use of eval()
    no-eval: true

    # Enforces variables names to be either camelCase
    # or UPPER_SNAKE_CASE, and disallows keywords as
    # variable names
    variable-name:
        - true
        - ban-keywords
        - check-format

    # Disallows any unused variables
    no-unused-variable:
        - true
        - check-parameters

    # Disallows any unused expressions
    no-unused-expression: true

    # Forces method overload signatures to be on
    # consecutive lines
    adjacent-overload-signatures: true

    # Forces class properties/methods to have
    # a visibility declaration
    member-access: true

    # Warns about casting to the same type
    no-unnecessary-type-assertion: true

    # Forces for-of loops instead of normal for loops
    # when only looping through array indexes
    prefer-for-of: true

    # Forces curly braces on blocks spanning multiple lines
    curly:
        - true
        - ignore-same-line

    # Disallows assignments in if statements
    # i.e. not allowing:
    #     if (a = getA()) { ... }
    # do this instead:
    #    const a = getA();
    #    if (a) { ... }
    no-conditional-assignment: true

    # Various rules warning of needless duplicate calls
    no-duplicate-super: true
    no-duplicate-switch-case: true
    no-duplicate-variable:
        - true
        - check-parameters

    # Disallows empty blocks, except catch blocks
    no-empty:
        - true
        - allow-empty-catch

    # Disallows using for-in loops to loop over an
    # array, for-of is probably what you want.
    no-for-in-array: true

    # Disallows importing from modules that are not
    # defined in package.json
    no-implicit-dependencies:
        - true
        - dev

    # Disallows a `return await` expression. An async
    # function always returns a promise, so the await
    # statement is unnecessary overhead.
    no-return-await: true

    # Disallows unnecessary string literal object property access
    # i.e. not allowing:
    #     obj['property']
    # use this instead:
    #     obj.property
    # still allows the following patterns:
    #     obj['prop-erty']
    #     obj[variable]
    no-string-literal: true

    # Disallows creating references to `this` You shouldn't
    # need to do that, most of the time you can use an arrow
    # function instead of referencing this.
    no-this-assignment:
        - true
        - allow-destructuring: true

    # Disallow usage of variables before they are declared.
    no-use-before-declare: true

    # Disallow use of the `var` keyword. Use `const` or `let` instead.
    no-var-keyword: true

    # Prefer usage of `{ ...spread }` over `Object.assign({}, spread)`
    prefer-object-spread: true

    # Requires the radix parameter when using `parseInt()`
    radix: true

    # Ensures that only the same types are used with the `+` operator.
    # i.e.
    #     const a = '1' + 3;   // Error! What's expected here, 4 or '13'?
    #     const b = 1 + 3;     // OK
    #     const c = '1' + '3'; // OK
    restrict-plus-operands: true

    # Prefers ===/!== over ==/!=
    triple-equals:
        - true
        - allow-null-check
        - allow-undefined-check

    # Enforces only one class exists per file
    max-classes-per-file:
        - true
        - 1

    # Disallows multiple import statements from the same file
    # i.e.
    #     // Not allowed
    #     import { a } from './module'
    #     import { b } from './module'
    #     // Allowed
    #     import { a, b } from './module'
    no-duplicate-imports: true

    # Prefers `const` over `let`. `const` is less error-prone
    # than `let`. `let` is still allowed if the variable is
    # reassigned/changed later.
    prefer-const:
        - true
        - destructuring: all

    # Enforces trailing commas. Better for git history.
    trailing-comma:
        - true
        - multiline: always
          singleline: never

    # Disallows redundant whitespace at the end of a line
    no-trailing-whitespace:
        - true
        - ignore-template-strings

    # Suggests shorthand arrow function return syntax if possible.
    # i.e.
    #     (a, b) => { return a + b; }
    # could be shortened to:
    #     (a b) => a + b
    arrow-return-shorthand: true

    ################################
    ## Very opinionated from here ##
    ################################

    # Forces single line comments to have a space after the slashes
    # i.e.
    #     // comment
    # not
    #     //comment
    comment-format:
        - true
        - check-space

    # Disallows more than one consecutive blank line.
    no-consecutive-blank-lines: true

    # Forces decimal numbers to start with `0.`, not just `.`,
    # and disallows trailing `0`s.
    number-literal-format: true

    # Disallows quotes around object keys, unless the key contains
    # a special character. In that case, _every_ key must be quoted.
    object-literal-key-quotes:
        - true
        - consistent-as-needed

    # Forces object literal shorthand where applicable.
    # i.e.
    #     { name: name }
    # should be
    #     { name }
    object-literal-shorthand: true

    # Forces catch/else/finally statements and opening braces to
    # be on the same line as the preceding block.
    one-line:
        - true
        - check-catch
        - check-else
        - check-finally
        - check-open-brace

    # Disallows more than one variable declaration at once.
    # i.e.
    #     let a = 1, b = 2; // Error
    #     let a = 1;        // OK
    #     let b = 2;        // OK
    one-variable-per-declaration:
        - true
        - ignore-for-loop

    # Forces import statements to be in alphabetical order.
    # They can be grouped by separating blocks of imports
    # with blank lines.
    ordered-imports:
        - true
        - import-sources-order: any
          named-imports-order: case-insensitive

    # Forces using template literals instead of concatenating.
    prefer-template: true

    # Forces single quotes instead of double quotes. Also
    # disallows template strings that do not contain interpolations.
    quotemark:
        - true
        - single
        - avoid-template

    # Forces semi-colons on appropriate lines.
    semicolon:
        - true
        - always

    # Forces a space after a function name, before the opening parenthesis.
    space-before-function-paren:
        - true
        - always

    # Disallows whitespace within function parentheses, except after commas
    space-within-parens:
        - true
        - min: 0

    # Miscellaneous whitespace
    whitespace:
        - true
        # if (a) {
        #   ^   ^
        - check-branch
        # let foo = 'bar';
        #        ^ ^
        - check-decl
        # foo == 'bar'
        #    ^  ^
        # a + b
        #  ^ ^
        - check-operator
        # import { A } from './a';
        #         ^ ^
        - check-module
        # [1, 2, 3, 4]
        #    ^  ^  ^
        - check-separator
        # let a: number = 1
        #       ^
        - check-type
        #
        - check-preblock

    eofline: true

    max-line-length:
        - true
        - limit: 100
          ignore-pattern: ^\s*\*|^\s*\/\/
